generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model DiscordUser {
  id        String        @id @default(uuid())
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  guilds    GuildConfig[]

  @@map(name: "discordusers")
}

model GuildConfig {
  id     Int     @id @unique
  prefix String  @default("$")
  active Boolean @default(false)

  // server activity channel to write command logs to
  systemChannelId        Int?
  afkChannelId           Int?
  rulesChannelId         Int?
  publicUpdatesChannelId Int?
  safetyAlertsChannelId  Int?

  welcomeConfig    WelcomeConfig?
  leaveConfig      LeaveConfig?
  autoroleConfig   RoleConfig?
  moderatorsConfig ModerationConfig?

  createAt DateTime    @default(now())
  updateAt DateTime    @updatedAt
  userId   String      @unique
  user     DiscordUser @relation(fields: [userId], references: [id])

  @@map("guildconfig")
}

model WelcomeConfig {
  enabled   Boolean     @default(false)
  channelId Int?
  dmEnabled Boolean     @default(false)
  message   String?
  createAt  DateTime    @default(now())
  updateAt  DateTime    @updatedAt
  guildId   Int         @unique
  guild     GuildConfig @relation(fields: [guildId], references: [id])

  @@map("welcomeconfig")
}

model LeaveConfig {
  enabled   Boolean  @default(false)
  channelId Int?
  dmEnabled Boolean  @default(false)
  message   String?
  createAt  DateTime @default(now())
  updateAt  DateTime @updatedAt

  guildId Int         @unique
  guild   GuildConfig @relation(fields: [guildId], references: [id])

  @@map("leaveconfig")
}

model RoleConfig {
  enabled  Boolean     @default(false)
  createAt DateTime    @default(now())
  updateAt DateTime    @updatedAt
  guildId  Int         @unique
  guild    GuildConfig @relation(fields: [guildId], references: [id])

  @@map("roleconfig")
}

model ModerationConfig {
  enabled             Boolean     @default(false)
  dmPunish            Boolean     @default(false)
  includeReason       Boolean     @default(false)
  preserveBanMessages Boolean     @default(false)
  deleteModCommands   Boolean     @default(false)
  logChannelId        Int?
  banMessage          String      @default("***{user} was banned***")
  unbanMessage        String      @default("***{user} was unbanned***")
  softbanMessage      String      @default("***{user} was soft banned***")
  kickMessage         String      @default("***{user} was kicked***")
  muteMessage         String      @default("***{user} was mute***")
  unmuteMessage       String      @default("***{user} was unmuted***")
  createAt            DateTime    @default(now())
  updateAt            DateTime    @updatedAt
  guildId             Int         @unique
  guild               GuildConfig @relation(fields: [guildId], references: [id])
}

enum RoleAction {
  ADD
  REMOVE
}

enum RoleType {
  DEFAULT
  MODERATOR
  ADMINISTRATOR
}

model Roles {
  id        Int        @id
  guilId    Int
  action    RoleAction @default(ADD)
  delay     Int        @default(0)
  type      RoleType   @default(DEFAULT)
  protected Boolean    @default(false)

  @@map("roles")
}
