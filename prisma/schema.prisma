generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
}

model DiscordUser {
  id        BigInt        @id @unique
  createdAt DateTime      @default(now()) @map("created_at")
  guilds    GuildConfig[] @relation("DiscordUserToGuildConfig")

  @@map("discordusers")
}

model GuildConfig {
  id               BigInt            @id @unique
  prefix           String            @default("$")
  active           Boolean           @default(false)
  createAt         DateTime          @default(now()) @map("created_at")
  updateAt         DateTime          @updatedAt @map("updated_at")
  updatesChannelId BigInt?           @map("channel_id")
  channels         Channels[]
  leaveConfig      LeaveConfig?
  moderationConfig ModerationConfig?
  roleConfig       RoleConfig?
  welcomeConfig    WelcomeConfig?
  users            DiscordUser[]     @relation("DiscordUserToGuildConfig")

  @@map("guildconfig")
}

model Channels {
  id               BigInt      @id
  name             String      @db.VarChar(100)
  type             Int
  isUpdatesChannel Boolean     @default(false) @map("is_updates_channel")
  guildId          BigInt      @map("guild_id")
  guild            GuildConfig @relation(fields: [guildId], references: [id])
}

model WelcomeConfig {
  enabled   Boolean     @default(false)
  channelId BigInt?     @map("channel_id")
  dmEnabled Boolean     @default(false) @map("dm_enabled")
  message   Json?
  createAt  DateTime    @default(now()) @map("created_at")
  updateAt  DateTime    @updatedAt @map("updated_at")
  guildId   BigInt      @unique @map("guild_id")
  guild     GuildConfig @relation(fields: [guildId], references: [id])

  @@map("welcomeconfig")
}

model LeaveConfig {
  enabled   Boolean     @default(false)
  channelId BigInt?
  dmEnabled Boolean     @default(false)
  message   String?
  createAt  DateTime    @default(now()) @map("created_at")
  updateAt  DateTime    @updatedAt @map("updated_at")
  guildId   BigInt      @unique @map("guild_id")
  guild     GuildConfig @relation(fields: [guildId], references: [id])

  @@map("leaveconfig")
}

model RoleConfig {
  enabled  Boolean     @default(false)
  createAt DateTime    @default(now()) @map("created_at")
  updateAt DateTime    @updatedAt @map("updated_at")
  guildId  BigInt      @unique @map("guild_id")
  roles    Role[]
  guild    GuildConfig @relation(fields: [guildId], references: [id])

  @@map("roleconfig")
}

model ModerationConfig {
  enabled             Boolean     @default(false)
  dmPunish            Boolean     @default(false) @map("dm_punish")
  includeReason       Boolean     @default(false) @map("include_reason")
  preserveBanMessages Boolean     @default(false) @map("preserve_ban_messages")
  deleteModCommands   Boolean     @default(false) @map("delete_mod_commands")
  logChannelId        BigInt?     @map("log_channel_id")
  banMessage          String      @default("***{user} was banned***") @map("banMessage")
  unbanMessage        String      @default("***{user} was unbanned***") @map("unban_message")
  softbanMessage      String      @default("***{user} was soft banned***") @map("softban_message")
  kickMessage         String      @default("***{user} was kicked***") @map("kick_message")
  muteMessage         String      @default("***{user} was mute***") @map("mute_message")
  unmuteMessage       String      @default("***{user} was unmuted***") @map("unmute_message")
  createAt            DateTime    @default(now()) @map("created_at")
  updateAt            DateTime    @updatedAt @map("updated_at")
  guildId             BigInt      @unique @map("guild_id")
  guild               GuildConfig @relation(fields: [guildId], references: [id])
  roles               Role[]

  @@map("moderationconfig")
}

model Role {
  id                      BigInt            @id
  delay                   Int?
  protected               Boolean           @default(false)
  roleConfigId            BigInt?           @map("role_config_id")
  moderationConfigGuildId BigInt?           @map("moderation_config_guild_id")
  color                   Int
  name                    String
  action                  RoleAction        @default(DEFAULT)
  type                    RoleType          @default(DEFAULT)
  moderationConfig        ModerationConfig? @relation(fields: [moderationConfigGuildId], references: [guildId])
  roleConfig              RoleConfig?       @relation(fields: [roleConfigId], references: [guildId])

  @@map("role")
}

enum RoleAction {
  ADD
  REMOVE
  DEFAULT
}

enum RoleType {
  DEFAULT
  MODERATOR
  ADMINISTRATOR
}
